#!/bin/zsh
#
# author: walter rowe <walter@walterrowe.com>
# copyright 2022 walter rowe
#
####
# usage: PROGRAM [ OPTIONS ] image [ .. ]
#
# OPTIONS:
#
# -h | --help               display a usage message with option descriptions
#
# -o | --overwrite          specifies to overwrite the original files vs the default
#                           of keeping them and writing new files with "-framed" inserted
#                           before the suffix
#
# -s=suffix |               suffix to append to decorated file names (default: "-framed")
# --suffix=suffix
#
# -t | --text               specifies to use a two-line text logo underneath the image
#
# -ot | --overlaytext       specifies to use a two-line text logo inside the image
#
# -l | --logo               specifies to place an image-based logo underneath the image
#                           DEFAULT style when no options are specified
#
# -ol | --overlaylogo       specifies to place an image-based logo inside the image
#
# -so | --solid             specifies a plain solid border style without any watermark
#
# -sl | --solid_logo         specifies a plain solid border with logo watermark underneath
#
# -slo | --solid_logo_overlay   specifies a plain solid border with logo watermark overlayed on image
#
# -st | --solid_text         specifies a plain solid border with text watermark underneath
#
# -sto | --solid_text_overlay   specifies a plain solid border with text watermark overlayed on image
#
# -f | --frame              add a picture frame around the sides of the image
#                           this disables bevel and enables shadowboxing (default no frame)
#
# -b | --bevel              add an interior bevel between the image and surrounding matte.
#                           this disables shadowboxing and picture frame. (default no bevel)
#
# -p | --picture            add a wall picture frame outer border for that wall mounted look.
#                           this disables shadowboxing and thin frame. (default no bevel)
#
# -d | --dropshadow         specifies a drop shadow (offset bottom and right) vs
#                           the default that centers the image in an all-edges shadow
#
# -bc=color |               specifies the color of the interior bevel (default #888888)
# --bevelcolor=color
#
# -fc=color |               specifies the color of the inner picture frame (default white)
# --framecolor=color
#
# -ic=color |               specifies the color of the inner solid border (default #000000)
# --innercolor=color
#
# -mc=color |               specifies the color of the matte background (default white)
# --mattecolor=color
#
# -oc=color |               specifies the color of the outer solid border (default #ffffff)
# --outercolor=color
#
# -pc=color |               specifies the color of the wall picture frame (default #0a0a0a)
# --picturecolor=color
#
# -sc=color |               specifies the color of the shadow (default black)
# --shadowcolor=color
#
# -tc=color |               specifies the color of the two-line text logo
# --textcolor=color         default #383838 below image, #E0E0E0 inside image
#
# -tf=font |                specify the font to use for the two-row label text logo
# --textfont=font
#
# -a=ratio |                specify the desired aspect ratio of the final output file in
# --aspect=ratio            width:height format (eg. -a=3:2, -a=4:5 -a=1:1). some social
#                           media sites prefer specific aspect ratios for best display.
#
# -w=your_logo |            specifies the image-based logo to use as the watermark that
# --watermark=your_logo     that is placed below or inside the image.
#
# -g=placement |            specifies which inside edge or corner of the image the logo
# --gravity=placement       or text should be nearest. The following are accepted values.
#                           The logo or text is inset from the specified edge or corner.
#                           DEFAULT edge is south/bottom.
#
#                             +----------------------------------------------------+
#                             | topleft               top                 topright |
#                             |                                                    |
#                             | left                 middle                  right |
#                             |                                                    |
#                             | bottomleft           bottom            bottomright |
#                             +----------------------------------------------------+
#
#                             +----------------------------------------------------+
#                             | northwest(nw)        north           northeast(ne) |
#                             |                                                    |
#                             | west                 center                   east |
#                             |                                                    |
#                             | southwest(sw)        south           southeast(se) |
#                             +----------------------------------------------------+
#
# -l1=text/iptc |           text or iptc field name to extract and use for line 1
# --label1=text/iptc        of a text sourced watermark
#
# -l2=text/iptc |           text or iptc field name to extract and use for line 2
# --label2=text/iptc        of a text sourced watermark
#
###

# load math functions, regex support
zmodload zsh/mathfunc
zmodload zsh/regex

# text option - two text label lines
label1="WALTER ROWE PHOTOGRAPHY"
label2="www.walterrowe.com"

# default logo watermark file - graphic watermark (my logo watermark is 900wx250h pixels w/ transparent background)
watermark=$HOME/Pictures/watermarks/watermark_dark.png

# homebrew on the Apple ARM platform installs apps in /opt/homebrew/bin
if [ -x /opt/homebrew/bin/brew ]; then
    eval $(/opt/homebrew/bin/brew shellenv)
fi

# homebrew on the Apple Intel platform installs apps in /usr/local/bin
if [ -x /usr/local/bin/brew ]; then
    eval $(/usr/local/bin/brew shellenv)
fi

# usage
usage()
{
    echo ""
    if [ $# -gt 0 ]; then
        echo error: $@
    else
        echo ""
        echo "command: ${program_base} ${program_args}"
        echo ""
        sed >&2 -e "1,/^####/d;  /^###/g;  /^#/!q;  s/^#//;  s/PROGRAM/${program_base}/;  s/^ //;  4,\$p" "$program_full"
    fi

}

# allow specifying logo placement by common terms or imagemagick terms
# e.g. a person can specify --bottom or --south and it is translated to -gravity south
declare -A gravity_opts=(
    [topleft]=northwest
    [top]=north
    [topright]=northeast
    [left]=west
    [middle]=center
    [right]=east
    [bottomleft]=southwest
    [bottom]=south
    [bottomright]=southeast
    [nw]=northwest
    [ne]=northeast
    [sw]=southwest
    [se]=southeast
)

# identify -format "%[EXIF:${exif_tags[${exif_key}]}]"
declare -A exif_tags=(
    [ISO]="PhotographicSensitivity"
    [ShutterSpeed]="ExposureTime"
    [Aperture]="ApertureValue"
    [ExposureBias]="ExposureBiasValue"
    [MeteringMode]="MeteringMode"
    [LightSource]="LightSource"
    [Flash]="Flash"
    [FocalLength]="FocalLength"
    [SubjectDistance]="SubjectDistance"
    [DateTimeOriginal]="DateTimeOriginal"
)

# identify -format "%[IPTC:${iptc_tags[${iptc_key}]}]"
declare -A iptc_tags=(
    [DateCreated]="2:55"
    [TimeCreated]="2:60"
    [DigitalCreationDate]="2:62"
    [DigitalCreationTime]="2:63"
    [Title]="2:05"
    [Headline]="2:105"
    [Caption]="2:120"
    [Keywords]="2:25"
    [Location]="2:92"
    [City]="2:90"
    [ProvinceState]="2:95"
    [Country]="2:101"
    [CountryCode]="2:100"
    [Author]="2:80"
    [AuthorTitle]="2:85"
    [Credit]="2:110"
    [Source]="2:115"
    [Copyright]="2:116"
    [Contact]="2:118"
    [CaptionWriter]="2:122"
    [Category]="2:15"
    [SupplementalCategory]="2:20"
    [Instructions]="2:40"
)

declare -A meter=(
    [0]="Unknown"
    [1]="Average"
    [2]="Center-Weighted Average"
    [3]="Spot"
    [4]="Multi-spot"
    [5]="Multi-segment"
    [6]="Partial"
    [255]="Other"
)

declare -A light=(
    [0]="Unknown"
    [1]="Daylight"
    [2]="Fluorescent"
    [3]="Tungsten (Incandescent)"
    [4]="Flash"
    [9]="Fine Weather"
    [10]="Cloudy	"
    [11]="Shade"
    [12]="Daylight Fluorescent"
    [13]="Day White Fluorescent"	
    [14]="Cool White Fluorescent"	
    [15]="White Fluorescent"
    [16]="Warm White Fluorescent	"
    [17]="Standard Light A"
    [18]="Standard Light B"	 	 
    [19]="Standard Light C"
    [20]="D55"
    [21]="D65"
    [22]="D75"
    [23]="D50"
    [24]="ISO Studio Tungsten"
    [255]="Other"
)

declare -A flash=(
    [0x0]="No Flash"
    [0x1]="Fired"
    [0x5]="Fired, Return not detected"
    [0x7]="Fired, Return detected"
    [0x8]="On, Did not fire"
    [0x9]="On, Fired"
    [0xd]="On, Return not detected"
    [0xf]="On, Return detected"
    [0x10]="Off, Did not fire"
    [0x14]="Off, Did not fire, Return not detected"
    [0x18]="Auto, Did not fire"
    [0x19]="Auto, Fired"
    [0x1d]="Auto, Fired, Return not detected"
    [0x1f]="Auto, Fired, Return detected"
    [0x20]="No flash function"
    [0x30]="Off, No flash function"
    [0x41]="Fired, Red-eye reduction"
    [0x45]="Fired, Red-eye reduction, Return not detected"
    [0x47]="Fired, Red-eye reduction, Return detected"
    [0x49]="On, Red-eye reduction"
    [0x4d]="On, Red-eye reduction, Return not detected"
    [0x4f]="On, Red-eye reduction, Return detected"
    [0x50]="Off, Red-eye reduction"
    [0x58]="Auto, Did not fire, Red-eye reduction"
    [0x59]="Auto, Fired, Red-eye reduction"
    [0x5d]="Auto, Fired, Red-eye reduction, Return not detected"
    [0x5f]="Auto, Fired, Red-eye reduction, Return detected"
)


# make egrep regex-es from array keys and values
gravity_keys=$(echo ${(k)gravity_opts} | sed -e 's; ;|;g')
gravity_vals=$(echo ${(v)gravity_opts} | sed -e 's; ;|;g')
iptc_keys=$(echo ${(k)iptc_tags} | sed -e 's; ;|;g')
iptc_vals=$(echo ${(v)iptc_tags} | sed -e 's; ;|;g')
exif_keys=$(echo ${(k)exif_tags} | sed -e 's; ;|;g')
exif_vals=$(echo ${(v)exif_tags} | sed -e 's; ;|;g')
meter_keys=$(echo ${(k)meter_tags} | sed -e 's; ;|;g')
meter_vals=$(echo ${(v)meter_tags} | sed -e 's; ;|;g')
light_keys=$(echo ${(k)light_tags} | sed -e 's; ;|;g')
light_vals=$(echo ${(v)light_tags} | sed -e 's; ;|;g')
flash_keys=$(echo ${(k)flash_tags} | sed -e 's; ;|;g')
flash_vals=$(echo ${(v)flash_tags} | sed -e 's; ;|;g')


# get name of script
eval program_base=$(basename $0)
eval program_full=$(which $0)
program_args=($@)


# must provide at least one file
if [ $# -lt 1 ]; then
    usage must provide at least one image file name
    exit 1
fi

# defaults
overwrite='false'
suffix='framed'
style='logo'
frame='false'
framecolor='white'
bevel='0x0'
bevelpad='0'
bevelcolor='#888888'
bevel_frame='0x0'
picture='false'
picturebevelinner='0x0'
picturebevelouter='0x0'
picturesurface='0x0'
picturecolor='#0a0a0a'
dropshadow='false'
shadowcolor='black'
inner='0'
outer='0'
gravity='south'
mattecolor='white'
mattewidth='0x0'
textcolor='#222222'
overlaytextcolor='#E0E0E0'
textfont='Copperplate'
aspect='false'
aspectratio='0'                     # zero means no change to aspect ratio
innercolor='#ffffff'
outercolor='#000000'

# process command line options
for opt in "$@"; do
    case ${opt} in
        -h|--help)
            usage
            exit 0
            ;;
        -o|--overwrite)
            # do not overwrite the original files
            overwrite='true'
            shift
            ;;
        -s=*|--suffix=*)
            opt=$(echo ${opt} | cut -d= -f2)
            suffix="${opt}"
            shift
            ;;
        -t|--text)
            style='text'
            shift
            ;;
        -ot|--overlaytext)
            style='overlay_text'
            shift
            ;;
        -l|--logo)
            style='logo'
            shift
            ;;
        -ol|--overlaylogo)
            style='overlay_logo'
            shift
            ;;
        -so|--solid)
            style='solid'
            shift
            ;;
        -sl|--solid_logo)
            style='solid_logo'
            shift
            ;;
        -slo|--solid_logo_overlay)
            style='solid_logo_overlay'
            shift
            ;;
        -st|--solid_text)
            style='solid_text'
            shift
            ;;
        -sto|--solid_text_overlay)
            style='solid_text_overlay'
            shift
            ;;
        -f|--frame)
            inner="1"
            outer="10"
            bevel="0x0"
            bevelpad="0"
            frame='true'
            shift
            ;;
        -b|--bevel)
            inner="0"
            outer="0"
            bevel="18x18+0+16"
            bevelpad="18"
            frame='false'
            shift
            ;;
        -p|--picture)
            picture='true'
            shift
            ;;
        -d|--dropshadow)
            dropshadow='true'
            shift
            ;;
        -bc=*|--bevelcolor=*)
            opt=$(echo ${opt} | cut -d= -f2)
            bevelcolor="${opt}"
            shift
            ;;
        -fc=*|--framecolor=*)
            opt=$(echo ${opt} | cut -d= -f2)
            framecolor="${opt}"
            shift
            ;;
        -ic=*|--innercolor=*)
            opt=$(echo ${opt} | cut -d= -f2)
            innercolor="${opt}"
            shift
            ;;
        -mc=*|--mattecolor=*)
            opt=$(echo ${opt} | cut -d= -f2)
            mattecolor="${opt}"
            shift
            ;;
        -oc=*|--outercolor=*)
            opt=$(echo ${opt} | cut -d= -f2)
            outercolor="${opt}"
            shift
            ;;
        -pc=*|--picturecolor=*)
            opt=$(echo ${opt} | cut -d= -f2)
            picturecolor="${opt}"
            shift
            ;;
        -sc=*|--shadowcolor=*)
            opt=$(echo ${opt} | cut -d= -f2)
            shadowcolor="${opt}"
            shift
            ;;
        -tc=*|--textcolor=*)
            opt=$(echo ${opt} | cut -d= -f2)
            textcolor="${opt}"
            overlaytextcolor="${opt}"
            shift
            ;;
        -tf=*|--textfont=*)
            opt=$(echo ${opt} | cut -d= -f2)
            textfont="${opt}"
            shift
            ;;
        -a=*|--aspect=*)
            opt=$(echo ${opt} | cut -d= -f2)
            aspectratio="${opt}"
            aspect=true
            shift
            ;;
        -w=*|--watermark=*)
            opt=$(echo ${opt} | cut -d= -f2)
            # evaluate watermark=your_logo to expand special chars like ~
            eval watermark=${opt}
            # make sure watermark really exists
            if [ ! -f ${watermark} ]; then
                usage watermark file \'${watermark}\' not found
                exit 1
            fi
            shift
            ;;
        -g=*|--gravity=*)
            opt=$(echo ${opt} | cut -d= -f2)
            # validate gravity location
            echo ${opt} | egrep -wq "${gravity_keys}|${gravity_vals}"
            if [ $? -ne 0 ]; then
                usage invalid gravity placement \'${opt}\' specified
                exit 1
            fi
            echo ${opt} | egrep -wq "${gravity_keys}"
            if [ $? -eq 0 ]; then
                # gravity specified as top, bottomleft, etc
                gravity="${gravity_opts[${opt}]}"
            else
                # gravity specified as north, southwest, etc
                gravity=${opt}
            fi
            shift
            ;;
        -l1=*|--label1=*)
            opt=$(echo "${opt}" | cut -d= -f2)
            # validate gravity location
            echo ${opt} | egrep -wq "${iptc_keys}"
            label1="${opt}"
            shift
            ;;
        -l2=*|--label2=*)
            opt=$(echo "${opt}" | cut -d= -f2)
            # validate gravity location
            echo ${opt} | egrep -wq "${iptc_keys}"
            label2="${opt}"
            shift
            ;;
        -*)
            usage invalid option \'${opt}\' specified
            exit 1
            ;;
    esac
done

# must provide at least one file
if [ $# -lt 1 ]; then
    usage must provide at least one image file name
    exit 1
fi

# get dimensions of watermark image file
if echo ${style} | egrep -q 'overlay'; then
    logo_wide=$(identify -format %w "${watermark}")
    logo_high=$(identify -format %h "${watermark}")
fi

# cycle through the list of provided images
for filename in "$@" ; do
    # skip over source files that do not exist
    if [ ! -f "${filename}" ]; then
        echo "File does not exist: '${filename}'"
        continue
    fi

    # source file parts - use eval to ensure expansion of ~, et al
    eval filepath=$(dirname "${filename:q}")
    eval filetype=$(basename "${filename:q}" | awk -F. '{ print $NF }')
    eval filebase=$(basename "${filename:q}" .${filetype})

    # if mattecolor is transparent, set file type to png vs source file type
    if [ $mattecolor = transparent ]; then
        filetype=png
    fi

    # source file
    eval source="${filename:q}"

    # target file
    if [ ${overwrite} = true ]; then
        eval target="${source:q}"
    else
        eval target="${filepath:q}/${filebase:q}-${suffix}.${filetype}"
    fi

    # extract image file width and height
    file_wide=$(identify -format %w "${source}")
    file_high=$(identify -format %h "${source}")

    # defaults based on 3000wx2000h source and 900wx250h logo
    #   - no dropshadow w/ 100% opacity and 25-pixel feather
    #   - pad left/top edges w/ 10 pixels
    #   - center so equal shadow on all edges

    # get longest/shortest edge
    if [ ${file_wide} -ge ${file_high} ]; then
        longEdge=${file_wide}
        shortEdge=${file_high}
    else
        longEdge=${file_high}
        shortEdge=${file_wide}
    fi

    # convert 3000:2000, 2000:3000, or 3000:3000 reference ratios to file's actual ratio
    scale_wide=$((3000 * ${longEdge} / ${shortEdge}))
    scale_high=$((2000 * ${longEdge} / ${shortEdge}))
    scaledLong=$((3000 * ${longEdge} / ${shortEdge}))
    scaledShort=$((2000 * ${longEdge} / ${shortEdge}))

    # scale label (40% width of image looks good)
    label_width=$((${file_wide} * 2 / 5))

    # scale logo for other images sizes
    logo_wide=$(identify -format %w "${watermark}")
    logo_high=$(identify -format %h "${watermark}")
    scaled_logo_wide=$((${logo_wide} * ${file_wide} / ${scale_wide}))
    scaled_logo_high=$((${logo_high} * ${file_high} / ${scale_high}))
    scaled_logo_lift=$((30 * ${file_high} / ${scale_high}))

    # scale padding, borders, shadow, logo placement
    if [ ${dropshadow} = false ]; then
        # settings for equal shadow around all edges of the image
        padding="11x11"
        shaded_area=$((25 * ${shortEdge} / ${scaledShort}))
        shadow="100x${shaded_area}"
        offset="+0+0"
        offset_border="0x0"
        logo_inset=$((30 * ${shortEdge} / ${scaledShort}))
        # half of delta (30) between reference padded_high/wide w/ and w/o drop shadow (10 vs 40)
        label_shadow_shift="10"
    else
        # settings for bottom right drop shadow below the image
        padding="0x0"
        # shift drop shadow layer down and right by 25 pixels, extend left/top matte to equalize matte width
        shaded_area=$((25 * ${shortEdge} / ${scaledShort}))
        border_area=$((2 * ${shaded_area}))
        shadow="100x${shaded_area}"
        offset="+${shaded_area}+${shaded_area}"
        offset_border="${border_area}x${border_area}"
        logo_inset=$((30 * ${shortEdge} / ${scaledShort}))
        label_shadow_shift="30"
    fi

    # if adding bevel, don't add shadowbox or right border matte padding
    if [ $bevel != '0x0' ]; then
        bevelWidth=$((18 * ${shortEdge} / ${scaledShort}))
        bevelOffset=$((16 * ${shortEdge} / ${scaledShort}))
        bevel="${bevelWidth}x${bevelWidth}+0+${bevelOffset}"
        bevelpad="${bevelWidth}"
        bevel_frame="${shaded_area}x${shaded_area}"
        padding="0x0"
        shadow="0x0"
        offset="+0+0"
        offset_border="0x0"
    fi

    # picture frame settings
    if [ $picture = true ]; then
        # turn off shadowboxing and print frame
        padding="0x0"
        bevel_frame="0x0"
        shadow="0x0"
        offset="+0+0"
        offset_border="0x0"
        inner="0"
        outer="0"
        frame='false'

        # calculate scaled value for inside bevel
        scaled_innerbevel1=$((18 * ${shortEdge} / ${scaledShort}))
        scaled_innerbevel2=$((${scaled_innerbevel1} - 2))
        # calculate scaled value for wall frame bevel
        scaled_picturebev1=$((8 * ${shortEdge} / ${scaledShort}))
        scaled_picturebev2=$((${scaled_picturebev1} - 2))
        # calculate scaled value for wall frame surface
        scaled_picturesurf=$((75 * ${shortEdge} / ${scaledShort}))
        # calculate scaled value for matte width between image bevel and wall frame
        scaled_mattewidth=$((300 * ${shortEdge} / ${scaledShort}))

        # set scaled inner bevel
        bevel="${scaled_innerbevel1}x${scaled_innerbevel1}+0+${scaled_innerbevel2}"
        bevelpad=${scaled_innerbevel1}
        # set scaled matte width
        mattewidth="${scaled_mattewidth}x${scaled_mattewidth}"
        # set wall frame inner bevel - note +0+${scaled_picturebev2}
        picturebevelinner="${scaled_picturebev1}x${scaled_picturebev1}+0+${scaled_picturebev2}"
        # set wall frame outer bevel - note +${scaled_picturebev2}+0
        picturebevelouter="${scaled_picturebev1}x${scaled_picturebev1}+${scaled_picturebev2}+0"
        # set wall frame top surface width
        picturesurface="${scaled_picturesurf}x${scaled_picturesurf}"
    fi

    # solid border styles have inner and outer borders (outer border = 1.5% of longest edge)
    if echo ${style} | egrep -q 'solid'; then
        inner=2
        # calculate solid border as 1.5% of longest edge
        outer=$((${longEdge} * 0.015))
        # calculate scaled_logo_lift and overlayed logo / text inset based on half of outer border width
        scaled_logo_lift=$((${outer} / 2 * ${longEdge} / ${scaledLong}))
    fi

    # inset overlay logos from the nearest edge based on gravity
    if echo ${style} | egrep -q 'overlay'; then
        case ${gravity} in
            center)
                logo_inset="+0+0"
                ;;
            north|south)
                logo_inset="+0+${scaled_logo_lift}"
                ;;
            west|east)
                logo_inset="+${scaled_logo_lift}+0"
                ;;
            northwest|northeast|southwest|southeast)
                logo_inset="+${scaled_logo_lift}+${scaled_logo_lift}"
                ;;
        esac
    fi

    # set initial label text to two lines from label1/label2
    labeltext="${label1}\n${label2}"

    # for text watermarks replace exif / iptc placeholders with values
    if echo ${style} | egrep -q 'text' ; then
        # set text size and spacing
        textsize=${file_wide} # 100% of image width
        fontsize=$((50 * ${file_wide} / 3000)) # scaled from 40 points for 3000x2000 image
        kerning=$((20 * ${file_wide} / 3000))
        spacing=$((30 * ${file_wide} / 3000))

        # enable perl compatible regular expression matching
        set -o rematchpcre

        # replace metadata placeholders with metadata values in label string 1
        while [[ "${labeltext}" =~ "%(\w+)" ]]
        do
            # validate the placeholder is a known exif / iptc metadata tag
            if ! echo ${match} | egrep -wq "${exif_keys}|${iptc_keys}"; then
                echo "ERROR: undefined metadata tag [%${match}] in labeltext:\n[${labeltext}]"
                echo "EXIF tags: ${exif_keys}"
                echo "IPTC tags: ${iptc_keys}"
                exit 1
            fi

            # extract exif placeholder data
            if echo ${match} | egrep -wq "${exif_keys}"; then
                metakey="%[EXIF:${exif_tags[${match}]}]"
                metaval=$(identify -format "${metakey}" ${source} 2>/dev/null)

                # if an exif tag is not present the value will be empty string
                if [[ ! -z ${metaval} ]]; then
                    case ${match} in
                        ISO)
                            # add "ISO" prefix to ISO value
                            metaval=$(printf 'ISO %d' $((${metaval})))
                            ;;
                        Aperture)
                            # convert integer to aperture f/stop
                            metaval=$(printf 'ƒ/%.1f' $((1.0 * sqrt(2.0 ** (1.0 * ${metaval})))))
                            ;;
                        ShutterSpeed)
                            # add "s" (seconds) after shutter speed
                            metaval=$(printf '%ss' ${metaval})
                            ;;
                        FocalLength)
                            # add "mm" (millimeter) to focal length
                            metaval=$(printf '%dmm' $((${metaval})))
                            ;;
                        MeteringMode)
                            # map metering mode code to text
                            metaval=${meter[$(printf '%d' ${metaval})]}
                            ;;
                        LightSource)
                            # map lighting source code to text
                            metaval=${light[$(printf '%d' ${metaval})]}
                            ;;
                        Flash)
                            # map flash code to text
                            metaval=${flash[$(printf '0x%x' ${metaval})]}
                            ;;
                    esac
                fi
            fi

            # extract iptc placeholder data
            if echo ${match} | egrep -wq "${iptc_keys}"; then
                metakey="%[IPTC:${iptc_tags[${match}]}]"
                metaval=$(identify -format "${metakey}" ${source} 2>/dev/null)
            fi

            # make sure sed parameter separator is not in the metadata value
            if echo "${metaval}" | egrep -q ":" ; then
                sedstring="s;%$match;$metaval;g"
            else
                sedstring="s:%$match:$metaval:g"
            fi

            # replace metadata place holder with metadata value
            labeltext=$(echo "${labeltext}" | sed -e "${sedstring}")
        done
    fi

    # decorate the image file
    case ${style} in
        # text decorated border with text watermark outside the image
        text)
            # use "+swap" to swap layer order before layer merge when placing text above the image
            if echo ${gravity} | egrep -q 'north' ; then
                swap="+swap"
            else
                swap=""
            fi

            # convert source file into decorated target file
            magick "${source}" -auto-orient \
                -mattecolor "${bevelcolor}" -frame ${bevel} \
                -mattecolor black -frame ${inner}x${inner} -mattecolor ${framecolor} -frame ${outer}x${outer} -mattecolor black -frame 1x1 -mattecolor ${mattecolor} -frame ${bevelpad}x${bevelpad} \
                \( +clone -background ${shadowcolor} -shadow ${shadow}${offset} \) \
                +swap -background ${mattecolor} -layers merge +repage \
                -gravity northwest -background ${mattecolor} -splice ${offset_border} \
                -mattecolor ${mattecolor} -frame ${padding} \
                \( -background ${mattecolor} -fill "${textcolor}" -font "${textfont}" -pointsize ${fontsize} -kerning ${kerning} \
                -interword-spacing ${spacing} -size ${textsize}x -gravity ${gravity} caption:"${labeltext}" \
                -mattecolor ${mattecolor} -frame $((2 * ${logo_inset}))x \
                   -append \) \
                ${swap} -append -layers merge +repage \
                -bordercolor ${mattecolor} -border 20x20 \
                -mattecolor ${mattecolor} -frame ${bevel_frame} \
                -background ${mattecolor} -gravity center -extent "${aspectratio}#" \
                -mattecolor ${mattecolor} -frame ${mattewidth} -mattecolor '#6b6b6b' -frame ${picturebevelinner} -mattecolor ${picturecolor} -frame ${picturesurface} -mattecolor '#333333' -frame ${picturebevelouter} \
                -format ${filetype} "${target}"
            ;;

        # overlay_text decorated border with text watermark overlaid on the image
        overlay_text)
            # convert source file into decorated target file
            magick "${source}" -auto-orient \
                -background transparent -fill "${overlaytextcolor}" -font "${textfont}" -pointsize ${fontsize} -kerning ${kerning} -interword-spacing ${spacing} -size ${textsize}x -gravity ${gravity} caption:"${labeltext}" -geometry ${logo_inset} -composite \
                -mattecolor "${bevelcolor}" -frame ${bevel} \
                -mattecolor black -frame ${inner}x${inner} -mattecolor ${framecolor} -frame ${outer}x${outer} -mattecolor black -frame 1x1 -mattecolor ${mattecolor} -frame ${bevelpad}x${bevelpad} \
                \( +clone -background ${shadowcolor} -shadow ${shadow}${offset} \) \
                +swap -background ${mattecolor} -layers merge +repage \
                -gravity northwest -background ${mattecolor} -splice ${offset_border} \
                -mattecolor ${mattecolor} -frame ${padding} \
                -bordercolor ${mattecolor} -border 20x20 \
                -mattecolor ${mattecolor} -frame ${bevel_frame} \
                -background ${mattecolor} -gravity center -extent "${aspectratio}#" \
                -mattecolor ${mattecolor} -frame ${mattewidth} -mattecolor '#6b6b6b' -frame ${picturebevelinner} -mattecolor ${picturecolor} -frame ${picturesurface} -mattecolor '#333333' -frame ${picturebevelouter} \
                -format ${filetype} "${target}"
            ;;

        # logo decorated border with logo watermark outside the image
        logo)
            # convert source file into decorated target file
            magick "${source}" -auto-orient \
                -mattecolor "${bevelcolor}" -frame ${bevel} \
                -mattecolor black -frame ${inner}x${inner} -mattecolor ${framecolor} -frame ${outer}x${outer} -mattecolor black -frame 1x1 -mattecolor ${mattecolor} -frame ${bevelpad}x${bevelpad} \
                \( +clone -background ${shadowcolor} -shadow ${shadow}${offset} \) \
                +swap -background ${mattecolor} -layers merge +repage \
                -gravity northwest -background ${mattecolor} -splice ${offset_border} \
                -gravity ${gravity} -background ${mattecolor} -splice 0x${scaled_logo_high} \
                \( ${watermark} -resize ${scaled_logo_wide}x${scaled_logo_high}\> -gravity ${gravity} -geometry +${scaled_logo_lift}+${scaled_logo_lift} \) -composite \
                -mattecolor ${mattecolor} -frame ${padding} \
                -mattecolor ${mattecolor} -frame 20x20 \
                -mattecolor ${mattecolor} -frame ${bevel_frame} \
                -background ${mattecolor} -gravity center -extent "${aspectratio}#" \
                -mattecolor ${mattecolor} -frame ${mattewidth} -mattecolor '#6b6b6b' -frame ${picturebevelinner} -mattecolor ${picturecolor} -frame ${picturesurface} -mattecolor '#333333' -frame ${picturebevelouter} \
                -format ${filetype} "${target}"
            ;;

        # overlay_logo decorated border with logo watermark overlaid on the image
        overlay_logo)
            # convert source file into decorated target file
            magick "${source}" -auto-orient \
                \( ${watermark} -resize ${scaled_logo_wide}x${scaled_logo_high}\> -gravity ${gravity} -geometry ${logo_inset} \) -composite \
                -mattecolor "${bevelcolor}" -frame ${bevel} \
                -mattecolor black -frame ${inner}x${inner} -mattecolor ${framecolor} -frame ${outer}x${outer} -mattecolor black -frame 1x1 -mattecolor ${mattecolor} -frame ${bevelpad}x${bevelpad} \
                \( +clone -background ${shadowcolor} -shadow ${shadow}${offset} \) \
                +swap -background ${mattecolor} -layers merge +repage \
                -gravity northwest -background ${mattecolor} -splice ${offset_border} \
                -mattecolor ${mattecolor} -frame ${padding} \
                -mattecolor ${mattecolor} -frame 20x20 \
                -mattecolor ${mattecolor} -frame ${bevel_frame} \
                -background ${mattecolor} -gravity center -extent "${aspectratio}#" \
                -mattecolor ${mattecolor} -frame ${mattewidth} -mattecolor '#6b6b6b' -frame ${picturebevelinner} -mattecolor ${picturecolor} -frame ${picturesurface} -mattecolor '#333333' -frame ${picturebevelouter} \
                -format ${filetype} "${target}"
            ;;

        # solid is a plain inner/outer border with NO WATERMARK
        solid)
            # convert source file into decorated target file
            magick "${source}" -auto-orient \
                -mattecolor ${innercolor} -frame ${inner}x${inner} -mattecolor ${outercolor} -frame ${outer}x${outer} \
                -background ${outercolor} -gravity center -extent "${aspectratio}#" \
                -format ${filetype} "${target}"
            ;;

        # solid is a plain inner/outer border with logo watermark outside the image
        solid_logo)
            # convert source file into decorated target file
            magick "${source}" -auto-orient \
                -mattecolor ${innercolor} -frame ${inner}x${inner} -mattecolor ${outercolor} -frame 0x$((${outer} / 2)) \
                -gravity ${gravity} -background ${outercolor} -splice 0x${scaled_logo_high} \
                \( ${watermark} -resize ${scaled_logo_wide}x${scaled_logo_high}\> -gravity ${gravity} -geometry +0+${scaled_logo_lift} \) -composite \
                -mattecolor ${outercolor} -frame ${outer}x$((${outer} / 2)) \
                -background ${outercolor} -gravity center -extent "${aspectratio}#" \
                -format ${filetype} "${target}"
            ;;

        # solid is a plain inner/outer border with logo watermark overlaid on the image
        solid_logo_overlay)
            # convert source file into decorated target file
            magick "${source}" -auto-orient \
                \( ${watermark} -resize ${scaled_logo_wide}x${scaled_logo_high}\> -gravity ${gravity} -geometry ${logo_inset} \) -composite \
                -mattecolor ${innercolor} -frame ${inner}x${inner} -mattecolor ${outercolor} -frame ${outer}x${outer} \
                -background ${outercolor} -gravity center -extent "${aspectratio}#" \
                -format ${filetype} "${target}"
            ;;

        # solid is a plain inner/outer border with text watermark outside the image 
        solid_text)
            # use "+swap" to swap layer order before layer merge when placing text above the image
            if echo ${gravity} | egrep -q 'north' ; then
                swap="+swap"
            else
                swap=""
            fi

            # convert source file into decorated target file
            magick "${source}" -auto-orient \
                -mattecolor ${innercolor} -frame ${inner}x${inner} -mattecolor ${outercolor} -frame 0x$((${outer} / 2)) \
                \( -background ${outercolor} -fill "${textcolor}" -font "${textfont}" -pointsize ${fontsize} -kerning ${kerning} \
                -interword-spacing ${spacing} -size ${textsize}x -gravity ${gravity} caption:"${labeltext}" -append \) \
                ${swap} -append -layers merge +repage \
                -mattecolor ${outercolor} -frame ${outer}x$((${outer} / 2)) \
                -background ${outercolor} -gravity center -extent "${aspectratio}#" \
                -format ${filetype} "${target}"
            ;;

        # solid is a plain inner/outer border with text watermark overlaid on the image
        solid_text_overlay)
            # convert source file into decorated target file
            magick "${source}" -auto-orient \
                -background transparent -fill "${overlaytextcolor}" -font "${textfont}" -pointsize ${fontsize} -size ${textsize}x \
                -gravity ${gravity} caption:"${labeltext}" -geometry ${logo_inset} -composite \
                -mattecolor ${innercolor} -frame ${inner}x${inner} -mattecolor ${outercolor} -frame ${outer}x${outer} \
                -background ${outercolor} -gravity center -extent "${aspectratio}#" \
                -format ${filetype} "${target}"
            ;;

    esac

done
